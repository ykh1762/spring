<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
	<!-- 전체 사용자 조회 -->
  	<select id="getAllUser" resultType="userVo">
    	select * from users
    	<!-- #userId# ==> #{userId} -->
  	</select>
  	
	<!-- 특정 사용자 조회(userId) selectUser(String userId). query, dao(test), service(test) -->
  	<select id="selectUser" resultType="userVo" parameterType="String">
  		select /*+ index(users pk_users) */* from users 
  		where userId = #{userId}
  	</select>
  	
  	<!-- 사용자 페이징 조회 -->
  	<!-- 특정 페이지 번호(page)에 해당하는 행들을 가져옴(행의 수는 pageSize). -->
  	<select id="selectUserPagingList" resultType="userVo" parameterType="pageVo">
		select *
		  from
			(select a.*, rownum rn
			  from
				(select users.*
				from users
				order by userid) a) a
		where rn between (#{page}-1)*#{pageSize}+1 and #{page}*#{pageSize}
  	</select>
  	
  	<!-- 전체 사용자 수 조회 -->
  	<select id="getUserCnt" resultType="Integer">
		select count (*)
		  from users
  	</select>
  	
  	<!-- 사용자 입력 --> <!-- ', ' -> '}, #{'로 replace -->
  	<insert id="insertUser" parameterType="userVo">
		insert into users (userId, userNm, alias, addr1, addr2, zipcode, pass, reg_dt, fileName, realFileName)
		values (#{userId}, #{userNm}, #{alias}, #{addr1}, #{addr2}, #{zipcode}, #{pass}, sysdate,
		#{fileName, jdbcType=VARCHAR}, #{realFileName, jdbcType=VARCHAR})  		
  	</insert>
  	
  	<!-- 사용자 삭제 -->
  	<delete id="deleteUser" parameterType="String">
		delete from users
		where userId = #{userId}  	
  	</delete>
  	
  	<!-- 사용자 정보 수정 -->
  	<update id="updateUser" parameterType="userVo">
  		update users
  		set
		userNm = #{userNm},
		alias = nvl(#{alias, jdbcType=VARCHAR}, alias),
		addr1 = nvl(#{addr1, jdbcType=VARCHAR}, addr1),
		addr2 = nvl(#{addr2, jdbcType=VARCHAR}, addr2),
		zipcode = nvl(#{zipcode, jdbcType=VARCHAR}, zipcode),
		pass = #{pass},
		fileName = nvl(#{fileName, jdbcType=VARCHAR}, fileName),
		realFileName = nvl(#{realFileName, jdbcType=VARCHAR}, realFileName)
		where userId = #{userId}
		
<!-- 		nvl -> null일때 특정 값을 입력. -->
<!-- 		fileName = nvl(#{fileName, idbcType=VARCHAR}, fileName), -->
<!-- 		realFileName = nvl(#{realFileName, idbcType=VARCHAR}, realFileName) -->
		
  	</update>
  	
  	<update id="updateUserPass" parameterType="userVo">
		update users set pass = #{pass}
		 where userId = #{userId}  		
  	</update>
  	
  	
</mapper>















